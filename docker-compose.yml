version: '2.2'

services:
  node1:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}
    container_name: node1
    environment:
      - node.name=node1
      - cluster.name=es-jne-cluster
      - discovery.seed_hosts=node2,node3
      - cluster.initial_master_nodes=node1,node2,node3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/node1/node1.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/node1/node1.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/node1/node1.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/node1/node1.key
      - path.repo=/usr/share/elasticsearch/backup
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
      - elastic-backup:/usr/share/elasticsearch/backup
      - certs:$CERTS_DIR
    networks:
      - elastic
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null;
        if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  node2:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}
    container_name: node2
    environment:
      - node.name=node2
      - cluster.name=es-jne-cluster
      - discovery.seed_hosts=node1,node3
      - cluster.initial_master_nodes=node1,node2,node3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/node2/node2.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/node2/node2.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/node2/node2.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/node2/node2.key
      - path.repo=/usr/share/elasticsearch/backup
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
      - elastic-backup:/usr/share/elasticsearch/backup
      - certs:$CERTS_DIR
    networks:
      - elastic
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null;
        if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  node3:
    image: docker.elastic.co/elasticsearch/elasticsearch:${VERSION}
    container_name: node3
    environment:
      - node.name=node3
      - cluster.name=es-jne-cluster
      - discovery.seed_hosts=node1,node2
      - cluster.initial_master_nodes=node1,node2,node3
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=trial
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/node3/node3.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/node3/node3.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/node3/node3.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/node3/node3.key
      - path.repo=/usr/share/elasticsearch/backup
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
      - elastic-backup:/usr/share/elasticsearch/backup
      - certs:$CERTS_DIR
    networks:
      - elastic
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null;
        if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5

  kibana:
    image: docker.elastic.co/kibana/kibana:${VERSION}
    container_name: kibana
    depends_on:
      {
        "node1": { "condition": "service_healthy" },
        "node2": { "condition": "service_healthy" },
        "node3": { "condition": "service_healthy" }
      }
    ports:
      - 5601:5601
    environment:
      - SERVERNAME=localhost
      - ELASTICSEARCH_HOSTS=["https://node1:9200","https://node2:9200","https://node3:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=$KIBANA_SYSTEM_PASSWORD
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=$CERTS_DIR/ca/ca.crt
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_KEY=$CERTS_DIR/kibana/kibana.key
      - SERVER_SSL_CERTIFICATE=$CERTS_DIR/kibana/kibana.crt
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml
      - certs:$CERTS_DIR
    networks:
      - elastic

  # heartbeat:
  #   image: docker.elastic.co/beats/heartbeat:${VERSION}
  #   depends_on:
  #     {
  #       "node1": { "condition": "service_healthy" },
  #       "node2": { "condition": "service_healthy" },
  #       "node3": { "condition": "service_healthy" }
  #     }
  #   environment:
  #     - BEATS_SYSTEM_PASSWORD=$BEATS_SYSTEM_PASSWORD
  #     - CERTS_DIR=$CERTS_DIR
  #   volumes:
  #     - ./heartbeat/heartbeat.yml:/usr/share/heartbeat/heartbeat.yml
  #     - ./heartbeat/monitors:/usr/share/heartbeat/monitors.d
  #     - certs:$CERTS_DIR
  #   container_name: heartbeat
  #   networks:
  #     - elastic

  logstash:
    image: docker.elastic.co/logstash/logstash:${VERSION}
    container_name: logstash
    depends_on:
      {
        "node1": { "condition": "service_healthy" },
        "node2": { "condition": "service_healthy" },
        "node3": { "condition": "service_healthy" }
      }
    environment:
      - xpack.monitoring.enabled=true
      - xpack.monitoring.elasticsearch.username=logstash_system
      - xpack.monitoring.elasticsearch.password=$LOGSTASH_SYSTEM
      - xpack.monitoring.elasticsearch.hosts=["https://node1:9200","https://node2:9200","https://node3:9200"]
      - xpack.monitoring.elasticsearch.ssl.certificate_authority=$CERTS_DIR/ca/ca.crt
      - CERTS_DIR=$CERTS_DIR
    volumes:
      - certs:$CERTS_DIR
    networks:
      - elastic

  nginx:
    image: nginx:alpine
    build: ./nginx
    container_name: load-balancer
    ports:
      - 8080:443
    networks:
      - elastic

volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
  elastic-backup:
    driver: local
  certs:
    driver: local

networks:
  elastic:
    name: elastic-network
    driver: bridge
